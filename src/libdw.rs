/* automatically generated by rust-bindgen */

#![allow(dead_code,
         non_camel_case_types,
         non_upper_case_globals,
         non_snake_case)]
pub type int8_t = i8;
pub type int16_t = i16;
pub type int32_t = i32;
pub type int64_t = i64;
pub type uint8_t = u8;
pub type uint16_t = u16;
pub type uint32_t = u32;
pub type uint64_t = u64;
pub type int_least8_t = ::std::os::raw::c_char;
pub type int_least16_t = ::std::os::raw::c_short;
pub type int_least32_t = ::std::os::raw::c_int;
pub type int_least64_t = ::std::os::raw::c_long;
pub type uint_least8_t = ::std::os::raw::c_uchar;
pub type uint_least16_t = ::std::os::raw::c_ushort;
pub type uint_least32_t = ::std::os::raw::c_uint;
pub type uint_least64_t = ::std::os::raw::c_ulong;
pub type int_fast8_t = ::std::os::raw::c_char;
pub type int_fast16_t = ::std::os::raw::c_long;
pub type int_fast32_t = ::std::os::raw::c_long;
pub type int_fast64_t = ::std::os::raw::c_long;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_ulong;
pub type uint_fast32_t = ::std::os::raw::c_ulong;
pub type uint_fast64_t = ::std::os::raw::c_ulong;
pub type intptr_t = isize;
pub type uintptr_t = usize;
pub type intmax_t = ::std::os::raw::c_long;
pub type uintmax_t = ::std::os::raw::c_ulong;
pub type __u_char = ::std::os::raw::c_uchar;
pub type __u_short = ::std::os::raw::c_ushort;
pub type __u_int = ::std::os::raw::c_uint;
pub type __u_long = ::std::os::raw::c_ulong;
pub type __int8_t = ::std::os::raw::c_char;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __quad_t = ::std::os::raw::c_long;
pub type __u_quad_t = ::std::os::raw::c_ulong;
pub type __dev_t = ::std::os::raw::c_ulong;
pub type __uid_t = ::std::os::raw::c_uint;
pub type __gid_t = ::std::os::raw::c_uint;
pub type __ino_t = ::std::os::raw::c_ulong;
pub type __ino64_t = ::std::os::raw::c_ulong;
pub type __mode_t = ::std::os::raw::c_uint;
pub type __nlink_t = ::std::os::raw::c_ulong;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type __pid_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct __fsid_t {
    pub __val: [::std::os::raw::c_int; 2usize],
}
impl ::std::default::Default for __fsid_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __clock_t = ::std::os::raw::c_long;
pub type __rlim_t = ::std::os::raw::c_ulong;
pub type __rlim64_t = ::std::os::raw::c_ulong;
pub type __id_t = ::std::os::raw::c_uint;
pub type __time_t = ::std::os::raw::c_long;
pub type __useconds_t = ::std::os::raw::c_uint;
pub type __suseconds_t = ::std::os::raw::c_long;
pub type __daddr_t = ::std::os::raw::c_int;
pub type __key_t = ::std::os::raw::c_int;
pub type __clockid_t = ::std::os::raw::c_int;
pub type __timer_t = *mut ::std::os::raw::c_void;
pub type __blksize_t = ::std::os::raw::c_long;
pub type __blkcnt_t = ::std::os::raw::c_long;
pub type __blkcnt64_t = ::std::os::raw::c_long;
pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
pub type __fsblkcnt64_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt64_t = ::std::os::raw::c_ulong;
pub type __fsword_t = ::std::os::raw::c_long;
pub type __ssize_t = ::std::os::raw::c_long;
pub type __syscall_slong_t = ::std::os::raw::c_long;
pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
pub type __loff_t = __off64_t;
pub type __qaddr_t = *mut __quad_t;
pub type __caddr_t = *mut ::std::os::raw::c_char;
pub type __intptr_t = ::std::os::raw::c_long;
pub type __socklen_t = ::std::os::raw::c_uint;
pub type u_char = __u_char;
pub type u_short = __u_short;
pub type u_int = __u_int;
pub type u_long = __u_long;
pub type quad_t = __quad_t;
pub type u_quad_t = __u_quad_t;
pub type fsid_t = __fsid_t;
pub type loff_t = __loff_t;
pub type ino_t = __ino_t;
pub type dev_t = __dev_t;
pub type gid_t = __gid_t;
pub type mode_t = __mode_t;
pub type nlink_t = __nlink_t;
pub type uid_t = __uid_t;
pub type off_t = __off_t;
pub type pid_t = __pid_t;
pub type id_t = __id_t;
pub type ssize_t = isize;
pub type daddr_t = __daddr_t;
pub type caddr_t = __caddr_t;
pub type key_t = __key_t;
pub type clock_t = __clock_t;
pub type time_t = __time_t;
pub type clockid_t = __clockid_t;
pub type timer_t = __timer_t;
pub type size_t = usize;
pub type ulong = ::std::os::raw::c_ulong;
pub type ushort = ::std::os::raw::c_ushort;
pub type uint_ = ::std::os::raw::c_uint;
pub type u_int8_t = ::std::os::raw::c_uchar;
pub type u_int16_t = ::std::os::raw::c_ushort;
pub type u_int32_t = ::std::os::raw::c_uint;
pub type u_int64_t = ::std::os::raw::c_ulong;
pub type register_t = ::std::os::raw::c_long;
pub type __sig_atomic_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct __sigset_t {
    pub __val: [::std::os::raw::c_ulong; 16usize],
}
impl ::std::default::Default for __sigset_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type sigset_t = __sigset_t;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct timespec {
    pub tv_sec: __time_t,
    pub tv_nsec: __syscall_slong_t,
}
impl ::std::default::Default for timespec {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct timeval {
    pub tv_sec: __time_t,
    pub tv_usec: __suseconds_t,
}
impl ::std::default::Default for timeval {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type suseconds_t = __suseconds_t;
pub type __fd_mask = ::std::os::raw::c_long;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct fd_set {
    pub __fds_bits: [__fd_mask; 16usize],
}
impl ::std::default::Default for fd_set {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type fd_mask = __fd_mask;
pub type blksize_t = __blksize_t;
pub type blkcnt_t = __blkcnt_t;
pub type fsblkcnt_t = __fsblkcnt_t;
pub type fsfilcnt_t = __fsfilcnt_t;
pub type pthread_t = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Copy)]
pub struct pthread_attr_t {
    pub _bindgen_data_: [u64; 7usize],
}
impl pthread_attr_t {
    pub unsafe fn __size(&mut self)
     -> *mut [::std::os::raw::c_char; 56usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __align(&mut self) -> *mut ::std::os::raw::c_long {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for pthread_attr_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for pthread_attr_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct __pthread_internal_list {
    pub __prev: *mut __pthread_internal_list,
    pub __next: *mut __pthread_internal_list,
}
impl ::std::default::Default for __pthread_internal_list {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __pthread_list_t = __pthread_internal_list;
#[repr(C)]
#[derive(Copy)]
pub struct pthread_mutex_t {
    pub _bindgen_data_: [u64; 5usize],
}
impl pthread_mutex_t {
    pub unsafe fn __data(&mut self) -> *mut __pthread_mutex_s {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __size(&mut self)
     -> *mut [::std::os::raw::c_char; 40usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __align(&mut self) -> *mut ::std::os::raw::c_long {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for pthread_mutex_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for pthread_mutex_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct __pthread_mutex_s {
    pub __lock: ::std::os::raw::c_int,
    pub __count: ::std::os::raw::c_uint,
    pub __owner: ::std::os::raw::c_int,
    pub __nusers: ::std::os::raw::c_uint,
    pub __kind: ::std::os::raw::c_int,
    pub __spins: ::std::os::raw::c_short,
    pub __elision: ::std::os::raw::c_short,
    pub __list: __pthread_list_t,
}
impl ::std::default::Default for __pthread_mutex_s {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct pthread_mutexattr_t {
    pub _bindgen_data_: [u32; 1usize],
}
impl pthread_mutexattr_t {
    pub unsafe fn __size(&mut self) -> *mut [::std::os::raw::c_char; 4usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __align(&mut self) -> *mut ::std::os::raw::c_int {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::default::Default for pthread_mutexattr_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct pthread_cond_t {
    pub _bindgen_data_: [u64; 6usize],
}
impl pthread_cond_t {
    pub unsafe fn __data(&mut self) -> *mut Struct_Unnamed1 {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __size(&mut self)
     -> *mut [::std::os::raw::c_char; 48usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __align(&mut self) -> *mut ::std::os::raw::c_longlong {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for pthread_cond_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for pthread_cond_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct Struct_Unnamed1 {
    pub __lock: ::std::os::raw::c_int,
    pub __futex: ::std::os::raw::c_uint,
    pub __total_seq: ::std::os::raw::c_ulonglong,
    pub __wakeup_seq: ::std::os::raw::c_ulonglong,
    pub __woken_seq: ::std::os::raw::c_ulonglong,
    pub __mutex: *mut ::std::os::raw::c_void,
    pub __nwaiters: ::std::os::raw::c_uint,
    pub __broadcast_seq: ::std::os::raw::c_uint,
}
impl ::std::default::Default for Struct_Unnamed1 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct pthread_condattr_t {
    pub _bindgen_data_: [u32; 1usize],
}
impl pthread_condattr_t {
    pub unsafe fn __size(&mut self) -> *mut [::std::os::raw::c_char; 4usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __align(&mut self) -> *mut ::std::os::raw::c_int {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::default::Default for pthread_condattr_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type pthread_key_t = ::std::os::raw::c_uint;
pub type pthread_once_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy)]
pub struct pthread_rwlock_t {
    pub _bindgen_data_: [u64; 7usize],
}
impl pthread_rwlock_t {
    pub unsafe fn __data(&mut self) -> *mut Struct_Unnamed2 {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __size(&mut self)
     -> *mut [::std::os::raw::c_char; 56usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __align(&mut self) -> *mut ::std::os::raw::c_long {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for pthread_rwlock_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for pthread_rwlock_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct Struct_Unnamed2 {
    pub __lock: ::std::os::raw::c_int,
    pub __nr_readers: ::std::os::raw::c_uint,
    pub __readers_wakeup: ::std::os::raw::c_uint,
    pub __writer_wakeup: ::std::os::raw::c_uint,
    pub __nr_readers_queued: ::std::os::raw::c_uint,
    pub __nr_writers_queued: ::std::os::raw::c_uint,
    pub __writer: ::std::os::raw::c_int,
    pub __shared: ::std::os::raw::c_int,
    pub __rwelision: ::std::os::raw::c_char,
    pub __pad1: [::std::os::raw::c_uchar; 7usize],
    pub __pad2: ::std::os::raw::c_ulong,
    pub __flags: ::std::os::raw::c_uint,
}
impl ::std::default::Default for Struct_Unnamed2 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct pthread_rwlockattr_t {
    pub _bindgen_data_: [u64; 1usize],
}
impl pthread_rwlockattr_t {
    pub unsafe fn __size(&mut self) -> *mut [::std::os::raw::c_char; 8usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __align(&mut self) -> *mut ::std::os::raw::c_long {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::default::Default for pthread_rwlockattr_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type pthread_spinlock_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct pthread_barrier_t {
    pub _bindgen_data_: [u64; 4usize],
}
impl pthread_barrier_t {
    pub unsafe fn __size(&mut self)
     -> *mut [::std::os::raw::c_char; 32usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __align(&mut self) -> *mut ::std::os::raw::c_long {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::default::Default for pthread_barrier_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct pthread_barrierattr_t {
    pub _bindgen_data_: [u32; 1usize],
}
impl pthread_barrierattr_t {
    pub unsafe fn __size(&mut self) -> *mut [::std::os::raw::c_char; 4usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __align(&mut self) -> *mut ::std::os::raw::c_int {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::default::Default for pthread_barrierattr_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type Elf32_Half = uint16_t;
pub type Elf64_Half = uint16_t;
pub type Elf32_Word = uint32_t;
pub type Elf32_Sword = int32_t;
pub type Elf64_Word = uint32_t;
pub type Elf64_Sword = int32_t;
pub type Elf32_Xword = uint64_t;
pub type Elf32_Sxword = int64_t;
pub type Elf64_Xword = uint64_t;
pub type Elf64_Sxword = int64_t;
pub type Elf32_Addr = uint32_t;
pub type Elf64_Addr = uint64_t;
pub type Elf32_Off = uint32_t;
pub type Elf64_Off = uint64_t;
pub type Elf32_Section = uint16_t;
pub type Elf64_Section = uint16_t;
pub type Elf32_Versym = Elf32_Half;
pub type Elf64_Versym = Elf64_Half;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct Elf32_Ehdr {
    pub e_ident: [::std::os::raw::c_uchar; 16usize],
    pub e_type: Elf32_Half,
    pub e_machine: Elf32_Half,
    pub e_version: Elf32_Word,
    pub e_entry: Elf32_Addr,
    pub e_phoff: Elf32_Off,
    pub e_shoff: Elf32_Off,
    pub e_flags: Elf32_Word,
    pub e_ehsize: Elf32_Half,
    pub e_phentsize: Elf32_Half,
    pub e_phnum: Elf32_Half,
    pub e_shentsize: Elf32_Half,
    pub e_shnum: Elf32_Half,
    pub e_shstrndx: Elf32_Half,
}
impl ::std::default::Default for Elf32_Ehdr {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct Elf64_Ehdr {
    pub e_ident: [::std::os::raw::c_uchar; 16usize],
    pub e_type: Elf64_Half,
    pub e_machine: Elf64_Half,
    pub e_version: Elf64_Word,
    pub e_entry: Elf64_Addr,
    pub e_phoff: Elf64_Off,
    pub e_shoff: Elf64_Off,
    pub e_flags: Elf64_Word,
    pub e_ehsize: Elf64_Half,
    pub e_phentsize: Elf64_Half,
    pub e_phnum: Elf64_Half,
    pub e_shentsize: Elf64_Half,
    pub e_shnum: Elf64_Half,
    pub e_shstrndx: Elf64_Half,
}
impl ::std::default::Default for Elf64_Ehdr {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct Elf32_Shdr {
    pub sh_name: Elf32_Word,
    pub sh_type: Elf32_Word,
    pub sh_flags: Elf32_Word,
    pub sh_addr: Elf32_Addr,
    pub sh_offset: Elf32_Off,
    pub sh_size: Elf32_Word,
    pub sh_link: Elf32_Word,
    pub sh_info: Elf32_Word,
    pub sh_addralign: Elf32_Word,
    pub sh_entsize: Elf32_Word,
}
impl ::std::default::Default for Elf32_Shdr {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct Elf64_Shdr {
    pub sh_name: Elf64_Word,
    pub sh_type: Elf64_Word,
    pub sh_flags: Elf64_Xword,
    pub sh_addr: Elf64_Addr,
    pub sh_offset: Elf64_Off,
    pub sh_size: Elf64_Xword,
    pub sh_link: Elf64_Word,
    pub sh_info: Elf64_Word,
    pub sh_addralign: Elf64_Xword,
    pub sh_entsize: Elf64_Xword,
}
impl ::std::default::Default for Elf64_Shdr {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct Elf32_Chdr {
    pub ch_type: Elf32_Word,
    pub ch_size: Elf32_Word,
    pub ch_addralign: Elf32_Word,
}
impl ::std::default::Default for Elf32_Chdr {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct Elf64_Chdr {
    pub ch_type: Elf64_Word,
    pub ch_reserved: Elf64_Word,
    pub ch_size: Elf64_Xword,
    pub ch_addralign: Elf64_Xword,
}
impl ::std::default::Default for Elf64_Chdr {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct Elf32_Sym {
    pub st_name: Elf32_Word,
    pub st_value: Elf32_Addr,
    pub st_size: Elf32_Word,
    pub st_info: ::std::os::raw::c_uchar,
    pub st_other: ::std::os::raw::c_uchar,
    pub st_shndx: Elf32_Section,
}
impl ::std::default::Default for Elf32_Sym {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct Elf64_Sym {
    pub st_name: Elf64_Word,
    pub st_info: ::std::os::raw::c_uchar,
    pub st_other: ::std::os::raw::c_uchar,
    pub st_shndx: Elf64_Section,
    pub st_value: Elf64_Addr,
    pub st_size: Elf64_Xword,
}
impl ::std::default::Default for Elf64_Sym {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct Elf32_Syminfo {
    pub si_boundto: Elf32_Half,
    pub si_flags: Elf32_Half,
}
impl ::std::default::Default for Elf32_Syminfo {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct Elf64_Syminfo {
    pub si_boundto: Elf64_Half,
    pub si_flags: Elf64_Half,
}
impl ::std::default::Default for Elf64_Syminfo {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct Elf32_Rel {
    pub r_offset: Elf32_Addr,
    pub r_info: Elf32_Word,
}
impl ::std::default::Default for Elf32_Rel {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct Elf64_Rel {
    pub r_offset: Elf64_Addr,
    pub r_info: Elf64_Xword,
}
impl ::std::default::Default for Elf64_Rel {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct Elf32_Rela {
    pub r_offset: Elf32_Addr,
    pub r_info: Elf32_Word,
    pub r_addend: Elf32_Sword,
}
impl ::std::default::Default for Elf32_Rela {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct Elf64_Rela {
    pub r_offset: Elf64_Addr,
    pub r_info: Elf64_Xword,
    pub r_addend: Elf64_Sxword,
}
impl ::std::default::Default for Elf64_Rela {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct Elf32_Phdr {
    pub p_type: Elf32_Word,
    pub p_offset: Elf32_Off,
    pub p_vaddr: Elf32_Addr,
    pub p_paddr: Elf32_Addr,
    pub p_filesz: Elf32_Word,
    pub p_memsz: Elf32_Word,
    pub p_flags: Elf32_Word,
    pub p_align: Elf32_Word,
}
impl ::std::default::Default for Elf32_Phdr {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct Elf64_Phdr {
    pub p_type: Elf64_Word,
    pub p_flags: Elf64_Word,
    pub p_offset: Elf64_Off,
    pub p_vaddr: Elf64_Addr,
    pub p_paddr: Elf64_Addr,
    pub p_filesz: Elf64_Xword,
    pub p_memsz: Elf64_Xword,
    pub p_align: Elf64_Xword,
}
impl ::std::default::Default for Elf64_Phdr {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct Elf32_Dyn {
    pub d_tag: Elf32_Sword,
    pub d_un: Union_Unnamed3,
}
impl ::std::default::Default for Elf32_Dyn {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct Union_Unnamed3 {
    pub _bindgen_data_: [u32; 1usize],
}
impl Union_Unnamed3 {
    pub unsafe fn d_val(&mut self) -> *mut Elf32_Word {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn d_ptr(&mut self) -> *mut Elf32_Addr {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::default::Default for Union_Unnamed3 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct Elf64_Dyn {
    pub d_tag: Elf64_Sxword,
    pub d_un: Union_Unnamed4,
}
impl ::std::default::Default for Elf64_Dyn {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct Union_Unnamed4 {
    pub _bindgen_data_: [u64; 1usize],
}
impl Union_Unnamed4 {
    pub unsafe fn d_val(&mut self) -> *mut Elf64_Xword {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn d_ptr(&mut self) -> *mut Elf64_Addr {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::default::Default for Union_Unnamed4 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct Elf32_Verdef {
    pub vd_version: Elf32_Half,
    pub vd_flags: Elf32_Half,
    pub vd_ndx: Elf32_Half,
    pub vd_cnt: Elf32_Half,
    pub vd_hash: Elf32_Word,
    pub vd_aux: Elf32_Word,
    pub vd_next: Elf32_Word,
}
impl ::std::default::Default for Elf32_Verdef {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct Elf64_Verdef {
    pub vd_version: Elf64_Half,
    pub vd_flags: Elf64_Half,
    pub vd_ndx: Elf64_Half,
    pub vd_cnt: Elf64_Half,
    pub vd_hash: Elf64_Word,
    pub vd_aux: Elf64_Word,
    pub vd_next: Elf64_Word,
}
impl ::std::default::Default for Elf64_Verdef {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct Elf32_Verdaux {
    pub vda_name: Elf32_Word,
    pub vda_next: Elf32_Word,
}
impl ::std::default::Default for Elf32_Verdaux {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct Elf64_Verdaux {
    pub vda_name: Elf64_Word,
    pub vda_next: Elf64_Word,
}
impl ::std::default::Default for Elf64_Verdaux {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct Elf32_Verneed {
    pub vn_version: Elf32_Half,
    pub vn_cnt: Elf32_Half,
    pub vn_file: Elf32_Word,
    pub vn_aux: Elf32_Word,
    pub vn_next: Elf32_Word,
}
impl ::std::default::Default for Elf32_Verneed {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct Elf64_Verneed {
    pub vn_version: Elf64_Half,
    pub vn_cnt: Elf64_Half,
    pub vn_file: Elf64_Word,
    pub vn_aux: Elf64_Word,
    pub vn_next: Elf64_Word,
}
impl ::std::default::Default for Elf64_Verneed {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct Elf32_Vernaux {
    pub vna_hash: Elf32_Word,
    pub vna_flags: Elf32_Half,
    pub vna_other: Elf32_Half,
    pub vna_name: Elf32_Word,
    pub vna_next: Elf32_Word,
}
impl ::std::default::Default for Elf32_Vernaux {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct Elf64_Vernaux {
    pub vna_hash: Elf64_Word,
    pub vna_flags: Elf64_Half,
    pub vna_other: Elf64_Half,
    pub vna_name: Elf64_Word,
    pub vna_next: Elf64_Word,
}
impl ::std::default::Default for Elf64_Vernaux {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct Elf32_auxv_t {
    pub a_type: uint32_t,
    pub a_un: Union_Unnamed5,
}
impl ::std::default::Default for Elf32_auxv_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct Union_Unnamed5 {
    pub _bindgen_data_: [u32; 1usize],
}
impl Union_Unnamed5 {
    pub unsafe fn a_val(&mut self) -> *mut uint32_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::default::Default for Union_Unnamed5 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct Elf64_auxv_t {
    pub a_type: uint64_t,
    pub a_un: Union_Unnamed6,
}
impl ::std::default::Default for Elf64_auxv_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct Union_Unnamed6 {
    pub _bindgen_data_: [u64; 1usize],
}
impl Union_Unnamed6 {
    pub unsafe fn a_val(&mut self) -> *mut uint64_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::default::Default for Union_Unnamed6 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct Elf32_Nhdr {
    pub n_namesz: Elf32_Word,
    pub n_descsz: Elf32_Word,
    pub n_type: Elf32_Word,
}
impl ::std::default::Default for Elf32_Nhdr {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct Elf64_Nhdr {
    pub n_namesz: Elf64_Word,
    pub n_descsz: Elf64_Word,
    pub n_type: Elf64_Word,
}
impl ::std::default::Default for Elf64_Nhdr {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct Elf32_Move {
    pub m_value: Elf32_Xword,
    pub m_info: Elf32_Word,
    pub m_poffset: Elf32_Word,
    pub m_repeat: Elf32_Half,
    pub m_stride: Elf32_Half,
    _bindgen_padding_0_: [u8; 4usize],
}
impl ::std::default::Default for Elf32_Move {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct Elf64_Move {
    pub m_value: Elf64_Xword,
    pub m_info: Elf64_Xword,
    pub m_poffset: Elf64_Xword,
    pub m_repeat: Elf64_Half,
    pub m_stride: Elf64_Half,
    _bindgen_padding_0_: [u8; 4usize],
}
impl ::std::default::Default for Elf64_Move {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct Elf32_gptab {
    pub _bindgen_data_: [u32; 2usize],
}
impl Elf32_gptab {
    pub unsafe fn gt_header(&mut self) -> *mut Struct_Unnamed7 {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn gt_entry(&mut self) -> *mut Struct_Unnamed8 {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::default::Default for Elf32_gptab {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct Struct_Unnamed7 {
    pub gt_current_g_value: Elf32_Word,
    pub gt_unused: Elf32_Word,
}
impl ::std::default::Default for Struct_Unnamed7 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct Struct_Unnamed8 {
    pub gt_g_value: Elf32_Word,
    pub gt_bytes: Elf32_Word,
}
impl ::std::default::Default for Struct_Unnamed8 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct Elf32_RegInfo {
    pub ri_gprmask: Elf32_Word,
    pub ri_cprmask: [Elf32_Word; 4usize],
    pub ri_gp_value: Elf32_Sword,
}
impl ::std::default::Default for Elf32_RegInfo {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct Elf_Options {
    pub kind: ::std::os::raw::c_uchar,
    pub size: ::std::os::raw::c_uchar,
    pub section: Elf32_Section,
    pub info: Elf32_Word,
}
impl ::std::default::Default for Elf_Options {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct Elf_Options_Hw {
    pub hwp_flags1: Elf32_Word,
    pub hwp_flags2: Elf32_Word,
}
impl ::std::default::Default for Elf_Options_Hw {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct Elf32_Lib {
    pub l_name: Elf32_Word,
    pub l_time_stamp: Elf32_Word,
    pub l_checksum: Elf32_Word,
    pub l_version: Elf32_Word,
    pub l_flags: Elf32_Word,
}
impl ::std::default::Default for Elf32_Lib {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct Elf64_Lib {
    pub l_name: Elf64_Word,
    pub l_time_stamp: Elf64_Word,
    pub l_checksum: Elf64_Word,
    pub l_version: Elf64_Word,
    pub l_flags: Elf64_Word,
}
impl ::std::default::Default for Elf64_Lib {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type Elf32_Conflict = Elf32_Addr;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct Elf_MIPS_ABIFlags_v0 {
    pub version: Elf32_Half,
    pub isa_level: ::std::os::raw::c_uchar,
    pub isa_rev: ::std::os::raw::c_uchar,
    pub gpr_size: ::std::os::raw::c_uchar,
    pub cpr1_size: ::std::os::raw::c_uchar,
    pub cpr2_size: ::std::os::raw::c_uchar,
    pub fp_abi: ::std::os::raw::c_uchar,
    pub isa_ext: Elf32_Word,
    pub ases: Elf32_Word,
    pub flags1: Elf32_Word,
    pub flags2: Elf32_Word,
}
impl ::std::default::Default for Elf_MIPS_ABIFlags_v0 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub const Val_GNU_MIPS_ABI_FP_MAX: Enum_Unnamed9 =
    Enum_Unnamed9::Val_GNU_MIPS_ABI_FP_64A;
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum Enum_Unnamed9 {
    Val_GNU_MIPS_ABI_FP_ANY = 0,
    Val_GNU_MIPS_ABI_FP_DOUBLE = 1,
    Val_GNU_MIPS_ABI_FP_SINGLE = 2,
    Val_GNU_MIPS_ABI_FP_SOFT = 3,
    Val_GNU_MIPS_ABI_FP_OLD_64 = 4,
    Val_GNU_MIPS_ABI_FP_XX = 5,
    Val_GNU_MIPS_ABI_FP_64 = 6,
    Val_GNU_MIPS_ABI_FP_64A = 7,
}
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum Elf_Type {
    ELF_T_BYTE = 0,
    ELF_T_ADDR = 1,
    ELF_T_DYN = 2,
    ELF_T_EHDR = 3,
    ELF_T_HALF = 4,
    ELF_T_OFF = 5,
    ELF_T_PHDR = 6,
    ELF_T_RELA = 7,
    ELF_T_REL = 8,
    ELF_T_SHDR = 9,
    ELF_T_SWORD = 10,
    ELF_T_SYM = 11,
    ELF_T_WORD = 12,
    ELF_T_XWORD = 13,
    ELF_T_SXWORD = 14,
    ELF_T_VDEF = 15,
    ELF_T_VDAUX = 16,
    ELF_T_VNEED = 17,
    ELF_T_VNAUX = 18,
    ELF_T_NHDR = 19,
    ELF_T_SYMINFO = 20,
    ELF_T_MOVE = 21,
    ELF_T_LIB = 22,
    ELF_T_GNUHASH = 23,
    ELF_T_AUXV = 24,
    ELF_T_CHDR = 25,
    ELF_T_NUM = 26,
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct Elf_Data {
    pub d_buf: *mut ::std::os::raw::c_void,
    pub d_type: Elf_Type,
    pub d_version: ::std::os::raw::c_uint,
    pub d_size: size_t,
    pub d_off: int64_t,
    pub d_align: size_t,
}
impl ::std::default::Default for Elf_Data {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum Elf_Cmd {
    ELF_C_NULL = 0,
    ELF_C_READ = 1,
    ELF_C_RDWR = 2,
    ELF_C_WRITE = 3,
    ELF_C_CLR = 4,
    ELF_C_SET = 5,
    ELF_C_FDDONE = 6,
    ELF_C_FDREAD = 7,
    ELF_C_READ_MMAP = 8,
    ELF_C_RDWR_MMAP = 9,
    ELF_C_WRITE_MMAP = 10,
    ELF_C_READ_MMAP_PRIVATE = 11,
    ELF_C_EMPTY = 12,
    ELF_C_NUM = 13,
}
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum Enum_Unnamed10 {
    ELF_F_DIRTY = 1,
    ELF_F_LAYOUT = 4,
    ELF_F_PERMISSIVE = 8,
}
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum Enum_Unnamed11 { ELF_CHF_FORCE = 1, }
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum Elf_Kind {
    ELF_K_NONE = 0,
    ELF_K_AR = 1,
    ELF_K_COFF = 2,
    ELF_K_ELF = 3,
    ELF_K_NUM = 4,
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct Elf_Arhdr {
    pub ar_name: *mut ::std::os::raw::c_char,
    pub ar_date: time_t,
    pub ar_uid: uid_t,
    pub ar_gid: gid_t,
    pub ar_mode: mode_t,
    pub ar_size: int64_t,
    pub ar_rawname: *mut ::std::os::raw::c_char,
}
impl ::std::default::Default for Elf_Arhdr {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct Elf_Arsym {
    pub as_name: *mut ::std::os::raw::c_char,
    pub as_off: size_t,
    pub as_hash: ::std::os::raw::c_ulong,
}
impl ::std::default::Default for Elf_Arsym {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub enum Elf { }
pub enum Elf_Scn { }
pub type GElf_Half = Elf64_Half;
pub type GElf_Word = Elf64_Word;
pub type GElf_Sword = Elf64_Sword;
pub type GElf_Xword = Elf64_Xword;
pub type GElf_Sxword = Elf64_Sxword;
pub type GElf_Addr = Elf64_Addr;
pub type GElf_Off = Elf64_Off;
pub type GElf_Ehdr = Elf64_Ehdr;
pub type GElf_Shdr = Elf64_Shdr;
pub type GElf_Section = Elf64_Section;
pub type GElf_Sym = Elf64_Sym;
pub type GElf_Syminfo = Elf64_Syminfo;
pub type GElf_Rel = Elf64_Rel;
pub type GElf_Rela = Elf64_Rela;
pub type GElf_Phdr = Elf64_Phdr;
pub type GElf_Chdr = Elf64_Chdr;
pub type GElf_Dyn = Elf64_Dyn;
pub type GElf_Verdef = Elf64_Verdef;
pub type GElf_Verdaux = Elf64_Verdaux;
pub type GElf_Verneed = Elf64_Verneed;
pub type GElf_Vernaux = Elf64_Vernaux;
pub type GElf_Versym = Elf64_Versym;
pub type GElf_auxv_t = Elf64_auxv_t;
pub type GElf_Nhdr = Elf64_Nhdr;
pub type GElf_Move = Elf64_Move;
pub type GElf_Lib = Elf64_Lib;
pub type ptrdiff_t = isize;
pub type wchar_t = ::std::os::raw::c_int;
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum Dwarf_Cmd { DWARF_C_READ = 0, DWARF_C_RDWR = 1, DWARF_C_WRITE = 2, }
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum Enum_Unnamed12 { DWARF_CB_OK = 0, DWARF_CB_ABORT = 1, }
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum Enum_Unnamed13 { DW_TAG_invalid = 0, }
pub type Dwarf_Off = GElf_Off;
pub type Dwarf_Addr = GElf_Addr;
pub type Dwarf_Word = GElf_Xword;
pub type Dwarf_Sword = GElf_Sxword;
pub type Dwarf_Half = GElf_Half;
pub enum Dwarf_Abbrev { }
pub enum Dwarf_Lines_s { }
pub type Dwarf_Lines = Dwarf_Lines_s;
pub enum Dwarf_Line_s { }
pub type Dwarf_Line = Dwarf_Line_s;
pub enum Dwarf_Files_s { }
pub type Dwarf_Files = Dwarf_Files_s;
pub enum Dwarf_Arange_s { }
pub type Dwarf_Arange = Dwarf_Arange_s;
pub enum Dwarf_Aranges_s { }
pub type Dwarf_Aranges = Dwarf_Aranges_s;
pub enum Dwarf_CU { }
pub enum Dwarf_Macro_s { }
pub type Dwarf_Macro = Dwarf_Macro_s;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct Dwarf_Attribute {
    pub code: ::std::os::raw::c_uint,
    pub form: ::std::os::raw::c_uint,
    pub valp: *mut ::std::os::raw::c_uchar,
    pub cu: *mut Dwarf_CU,
}
impl ::std::default::Default for Dwarf_Attribute {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct Dwarf_Block {
    pub length: Dwarf_Word,
    pub data: *mut ::std::os::raw::c_uchar,
}
impl ::std::default::Default for Dwarf_Block {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct Dwarf_Die {
    pub addr: *mut ::std::os::raw::c_void,
    pub cu: *mut Dwarf_CU,
    pub abbrev: *mut Dwarf_Abbrev,
    pub padding__: ::std::os::raw::c_long,
}
impl ::std::default::Default for Dwarf_Die {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct Dwarf_Global {
    pub cu_offset: Dwarf_Off,
    pub die_offset: Dwarf_Off,
    pub name: *const ::std::os::raw::c_char,
}
impl ::std::default::Default for Dwarf_Global {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct Dwarf_Op {
    pub atom: uint8_t,
    pub number: Dwarf_Word,
    pub number2: Dwarf_Word,
    pub offset: Dwarf_Word,
}
impl ::std::default::Default for Dwarf_Op {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct Dwarf_CIE {
    pub CIE_id: Dwarf_Off,
    pub initial_instructions: *const uint8_t,
    pub initial_instructions_end: *const uint8_t,
    pub code_alignment_factor: Dwarf_Word,
    pub data_alignment_factor: Dwarf_Sword,
    pub return_address_register: Dwarf_Word,
    pub augmentation: *const ::std::os::raw::c_char,
    pub augmentation_data: *const uint8_t,
    pub augmentation_data_size: size_t,
    pub fde_augmentation_data_size: size_t,
}
impl ::std::default::Default for Dwarf_CIE {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct Dwarf_FDE {
    pub CIE_pointer: Dwarf_Off,
    pub start: *const uint8_t,
    pub end: *const uint8_t,
}
impl ::std::default::Default for Dwarf_FDE {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct Dwarf_CFI_Entry {
    pub _bindgen_data_: [u64; 10usize],
}
impl Dwarf_CFI_Entry {
    pub unsafe fn CIE_id(&mut self) -> *mut Dwarf_Off {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn cie(&mut self) -> *mut Dwarf_CIE {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn fde(&mut self) -> *mut Dwarf_FDE {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::default::Default for Dwarf_CFI_Entry {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub enum Dwarf_Frame_s { }
pub type Dwarf_Frame = Dwarf_Frame_s;
pub enum Dwarf_CFI_s { }
pub type Dwarf_CFI = Dwarf_CFI_s;
pub enum Dwarf { }
pub type Dwarf_OOM = ::std::option::Option<extern "C" fn()>;
extern "C" {
    pub fn select(__nfds: ::std::os::raw::c_int, __readfds: *mut fd_set,
                  __writefds: *mut fd_set, __exceptfds: *mut fd_set,
                  __timeout: *mut timeval) -> ::std::os::raw::c_int;
    pub fn pselect(__nfds: ::std::os::raw::c_int, __readfds: *mut fd_set,
                   __writefds: *mut fd_set, __exceptfds: *mut fd_set,
                   __timeout: *const timespec, __sigmask: *const __sigset_t)
     -> ::std::os::raw::c_int;
    pub fn gnu_dev_major(__dev: ::std::os::raw::c_ulonglong)
     -> ::std::os::raw::c_uint;
    pub fn gnu_dev_minor(__dev: ::std::os::raw::c_ulonglong)
     -> ::std::os::raw::c_uint;
    pub fn gnu_dev_makedev(__major: ::std::os::raw::c_uint,
                           __minor: ::std::os::raw::c_uint)
     -> ::std::os::raw::c_ulonglong;
    pub fn elf_begin(__fildes: ::std::os::raw::c_int, __cmd: Elf_Cmd,
                     __ref: *mut Elf) -> *mut Elf;
    pub fn elf_clone(__elf: *mut Elf, __cmd: Elf_Cmd) -> *mut Elf;
    pub fn elf_memory(__image: *mut ::std::os::raw::c_char, __size: size_t)
     -> *mut Elf;
    pub fn elf_next(__elf: *mut Elf) -> Elf_Cmd;
    pub fn elf_end(__elf: *mut Elf) -> ::std::os::raw::c_int;
    pub fn elf_update(__elf: *mut Elf, __cmd: Elf_Cmd) -> int64_t;
    pub fn elf_kind(__elf: *mut Elf) -> Elf_Kind;
    pub fn elf_getbase(__elf: *mut Elf) -> int64_t;
    pub fn elf_getident(__elf: *mut Elf, __nbytes: *mut size_t)
     -> *mut ::std::os::raw::c_char;
    pub fn elf32_getehdr(__elf: *mut Elf) -> *mut Elf32_Ehdr;
    pub fn elf64_getehdr(__elf: *mut Elf) -> *mut Elf64_Ehdr;
    pub fn elf32_newehdr(__elf: *mut Elf) -> *mut Elf32_Ehdr;
    pub fn elf64_newehdr(__elf: *mut Elf) -> *mut Elf64_Ehdr;
    pub fn elf_getphdrnum(__elf: *mut Elf, __dst: *mut size_t)
     -> ::std::os::raw::c_int;
    pub fn elf32_getphdr(__elf: *mut Elf) -> *mut Elf32_Phdr;
    pub fn elf64_getphdr(__elf: *mut Elf) -> *mut Elf64_Phdr;
    pub fn elf32_newphdr(__elf: *mut Elf, __cnt: size_t) -> *mut Elf32_Phdr;
    pub fn elf64_newphdr(__elf: *mut Elf, __cnt: size_t) -> *mut Elf64_Phdr;
    pub fn elf_getscn(__elf: *mut Elf, __index: size_t) -> *mut Elf_Scn;
    pub fn elf32_offscn(__elf: *mut Elf, __offset: Elf32_Off) -> *mut Elf_Scn;
    pub fn elf64_offscn(__elf: *mut Elf, __offset: Elf64_Off) -> *mut Elf_Scn;
    pub fn elf_ndxscn(__scn: *mut Elf_Scn) -> size_t;
    pub fn elf_nextscn(__elf: *mut Elf, __scn: *mut Elf_Scn) -> *mut Elf_Scn;
    pub fn elf_newscn(__elf: *mut Elf) -> *mut Elf_Scn;
    pub fn elf_scnshndx(__scn: *mut Elf_Scn) -> ::std::os::raw::c_int;
    pub fn elf_getshdrnum(__elf: *mut Elf, __dst: *mut size_t)
     -> ::std::os::raw::c_int;
    pub fn elf_getshnum(__elf: *mut Elf, __dst: *mut size_t)
     -> ::std::os::raw::c_int;
    pub fn elf_getshdrstrndx(__elf: *mut Elf, __dst: *mut size_t)
     -> ::std::os::raw::c_int;
    pub fn elf_getshstrndx(__elf: *mut Elf, __dst: *mut size_t)
     -> ::std::os::raw::c_int;
    pub fn elf32_getshdr(__scn: *mut Elf_Scn) -> *mut Elf32_Shdr;
    pub fn elf64_getshdr(__scn: *mut Elf_Scn) -> *mut Elf64_Shdr;
    pub fn elf32_getchdr(__scn: *mut Elf_Scn) -> *mut Elf32_Chdr;
    pub fn elf64_getchdr(__scn: *mut Elf_Scn) -> *mut Elf64_Chdr;
    pub fn elf_compress(scn: *mut Elf_Scn, type_: ::std::os::raw::c_int,
                        flags: ::std::os::raw::c_uint)
     -> ::std::os::raw::c_int;
    pub fn elf_compress_gnu(scn: *mut Elf_Scn,
                            compress: ::std::os::raw::c_int,
                            flags: ::std::os::raw::c_uint)
     -> ::std::os::raw::c_int;
    pub fn elf_flagelf(__elf: *mut Elf, __cmd: Elf_Cmd,
                       __flags: ::std::os::raw::c_uint)
     -> ::std::os::raw::c_uint;
    pub fn elf_flagehdr(__elf: *mut Elf, __cmd: Elf_Cmd,
                        __flags: ::std::os::raw::c_uint)
     -> ::std::os::raw::c_uint;
    pub fn elf_flagphdr(__elf: *mut Elf, __cmd: Elf_Cmd,
                        __flags: ::std::os::raw::c_uint)
     -> ::std::os::raw::c_uint;
    pub fn elf_flagscn(__scn: *mut Elf_Scn, __cmd: Elf_Cmd,
                       __flags: ::std::os::raw::c_uint)
     -> ::std::os::raw::c_uint;
    pub fn elf_flagdata(__data: *mut Elf_Data, __cmd: Elf_Cmd,
                        __flags: ::std::os::raw::c_uint)
     -> ::std::os::raw::c_uint;
    pub fn elf_flagshdr(__scn: *mut Elf_Scn, __cmd: Elf_Cmd,
                        __flags: ::std::os::raw::c_uint)
     -> ::std::os::raw::c_uint;
    pub fn elf_getdata(__scn: *mut Elf_Scn, __data: *mut Elf_Data)
     -> *mut Elf_Data;
    pub fn elf_rawdata(__scn: *mut Elf_Scn, __data: *mut Elf_Data)
     -> *mut Elf_Data;
    pub fn elf_newdata(__scn: *mut Elf_Scn) -> *mut Elf_Data;
    pub fn elf_getdata_rawchunk(__elf: *mut Elf, __offset: int64_t,
                                __size: size_t, __type: Elf_Type)
     -> *mut Elf_Data;
    pub fn elf_strptr(__elf: *mut Elf, __index: size_t, __offset: size_t)
     -> *mut ::std::os::raw::c_char;
    pub fn elf_getarhdr(__elf: *mut Elf) -> *mut Elf_Arhdr;
    pub fn elf_getaroff(__elf: *mut Elf) -> int64_t;
    pub fn elf_rand(__elf: *mut Elf, __offset: size_t) -> size_t;
    pub fn elf_getarsym(__elf: *mut Elf, __narsyms: *mut size_t)
     -> *mut Elf_Arsym;
    pub fn elf_cntl(__elf: *mut Elf, __cmd: Elf_Cmd) -> ::std::os::raw::c_int;
    pub fn elf_rawfile(__elf: *mut Elf, __nbytes: *mut size_t)
     -> *mut ::std::os::raw::c_char;
    pub fn elf32_fsize(__type: Elf_Type, __count: size_t,
                       __version: ::std::os::raw::c_uint) -> size_t;
    pub fn elf64_fsize(__type: Elf_Type, __count: size_t,
                       __version: ::std::os::raw::c_uint) -> size_t;
    pub fn elf32_xlatetom(__dest: *mut Elf_Data, __src: *const Elf_Data,
                          __encode: ::std::os::raw::c_uint) -> *mut Elf_Data;
    pub fn elf64_xlatetom(__dest: *mut Elf_Data, __src: *const Elf_Data,
                          __encode: ::std::os::raw::c_uint) -> *mut Elf_Data;
    pub fn elf32_xlatetof(__dest: *mut Elf_Data, __src: *const Elf_Data,
                          __encode: ::std::os::raw::c_uint) -> *mut Elf_Data;
    pub fn elf64_xlatetof(__dest: *mut Elf_Data, __src: *const Elf_Data,
                          __encode: ::std::os::raw::c_uint) -> *mut Elf_Data;
    pub fn elf_errno() -> ::std::os::raw::c_int;
    pub fn elf_errmsg(__error: ::std::os::raw::c_int)
     -> *const ::std::os::raw::c_char;
    pub fn elf_version(__version: ::std::os::raw::c_uint)
     -> ::std::os::raw::c_uint;
    pub fn elf_fill(__fill: ::std::os::raw::c_int);
    pub fn elf_hash(__string: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_ulong;
    pub fn elf_gnu_hash(__string: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_ulong;
    pub fn elf32_checksum(__elf: *mut Elf) -> ::std::os::raw::c_long;
    pub fn elf64_checksum(__elf: *mut Elf) -> ::std::os::raw::c_long;
    pub fn gelf_getclass(__elf: *mut Elf) -> ::std::os::raw::c_int;
    pub fn gelf_fsize(__elf: *mut Elf, __type: Elf_Type, __count: size_t,
                      __version: ::std::os::raw::c_uint) -> size_t;
    pub fn gelf_getehdr(__elf: *mut Elf, __dest: *mut GElf_Ehdr)
     -> *mut GElf_Ehdr;
    pub fn gelf_update_ehdr(__elf: *mut Elf, __src: *mut GElf_Ehdr)
     -> ::std::os::raw::c_int;
    pub fn gelf_newehdr(__elf: *mut Elf, __class: ::std::os::raw::c_int)
     -> ::std::os::raw::c_ulong;
    pub fn gelf_offscn(__elf: *mut Elf, __offset: GElf_Off) -> *mut Elf_Scn;
    pub fn gelf_getshdr(__scn: *mut Elf_Scn, __dst: *mut GElf_Shdr)
     -> *mut GElf_Shdr;
    pub fn gelf_update_shdr(__scn: *mut Elf_Scn, __src: *mut GElf_Shdr)
     -> ::std::os::raw::c_int;
    pub fn gelf_getphdr(__elf: *mut Elf, __ndx: ::std::os::raw::c_int,
                        __dst: *mut GElf_Phdr) -> *mut GElf_Phdr;
    pub fn gelf_update_phdr(__elf: *mut Elf, __ndx: ::std::os::raw::c_int,
                            __src: *mut GElf_Phdr) -> ::std::os::raw::c_int;
    pub fn gelf_newphdr(__elf: *mut Elf, __phnum: size_t)
     -> ::std::os::raw::c_ulong;
    pub fn gelf_getchdr(__scn: *mut Elf_Scn, __dst: *mut GElf_Chdr)
     -> *mut GElf_Chdr;
    pub fn gelf_xlatetom(__elf: *mut Elf, __dest: *mut Elf_Data,
                         __src: *const Elf_Data,
                         __encode: ::std::os::raw::c_uint) -> *mut Elf_Data;
    pub fn gelf_xlatetof(__elf: *mut Elf, __dest: *mut Elf_Data,
                         __src: *const Elf_Data,
                         __encode: ::std::os::raw::c_uint) -> *mut Elf_Data;
    pub fn gelf_getrel(__data: *mut Elf_Data, __ndx: ::std::os::raw::c_int,
                       __dst: *mut GElf_Rel) -> *mut GElf_Rel;
    pub fn gelf_getrela(__data: *mut Elf_Data, __ndx: ::std::os::raw::c_int,
                        __dst: *mut GElf_Rela) -> *mut GElf_Rela;
    pub fn gelf_update_rel(__dst: *mut Elf_Data, __ndx: ::std::os::raw::c_int,
                           __src: *mut GElf_Rel) -> ::std::os::raw::c_int;
    pub fn gelf_update_rela(__dst: *mut Elf_Data,
                            __ndx: ::std::os::raw::c_int,
                            __src: *mut GElf_Rela) -> ::std::os::raw::c_int;
    pub fn gelf_getsym(__data: *mut Elf_Data, __ndx: ::std::os::raw::c_int,
                       __dst: *mut GElf_Sym) -> *mut GElf_Sym;
    pub fn gelf_update_sym(__data: *mut Elf_Data,
                           __ndx: ::std::os::raw::c_int, __src: *mut GElf_Sym)
     -> ::std::os::raw::c_int;
    pub fn gelf_getsymshndx(__symdata: *mut Elf_Data,
                            __shndxdata: *mut Elf_Data,
                            __ndx: ::std::os::raw::c_int,
                            __sym: *mut GElf_Sym, __xshndx: *mut Elf32_Word)
     -> *mut GElf_Sym;
    pub fn gelf_update_symshndx(__symdata: *mut Elf_Data,
                                __shndxdata: *mut Elf_Data,
                                __ndx: ::std::os::raw::c_int,
                                __sym: *mut GElf_Sym, __xshndx: Elf32_Word)
     -> ::std::os::raw::c_int;
    pub fn gelf_getsyminfo(__data: *mut Elf_Data,
                           __ndx: ::std::os::raw::c_int,
                           __dst: *mut GElf_Syminfo) -> *mut GElf_Syminfo;
    pub fn gelf_update_syminfo(__data: *mut Elf_Data,
                               __ndx: ::std::os::raw::c_int,
                               __src: *mut GElf_Syminfo)
     -> ::std::os::raw::c_int;
    pub fn gelf_getdyn(__data: *mut Elf_Data, __ndx: ::std::os::raw::c_int,
                       __dst: *mut GElf_Dyn) -> *mut GElf_Dyn;
    pub fn gelf_update_dyn(__dst: *mut Elf_Data, __ndx: ::std::os::raw::c_int,
                           __src: *mut GElf_Dyn) -> ::std::os::raw::c_int;
    pub fn gelf_getmove(__data: *mut Elf_Data, __ndx: ::std::os::raw::c_int,
                        __dst: *mut GElf_Move) -> *mut GElf_Move;
    pub fn gelf_update_move(__data: *mut Elf_Data,
                            __ndx: ::std::os::raw::c_int,
                            __src: *mut GElf_Move) -> ::std::os::raw::c_int;
    pub fn gelf_getlib(__data: *mut Elf_Data, __ndx: ::std::os::raw::c_int,
                       __dst: *mut GElf_Lib) -> *mut GElf_Lib;
    pub fn gelf_update_lib(__data: *mut Elf_Data,
                           __ndx: ::std::os::raw::c_int, __src: *mut GElf_Lib)
     -> ::std::os::raw::c_int;
    pub fn gelf_getversym(__data: *mut Elf_Data, __ndx: ::std::os::raw::c_int,
                          __dst: *mut GElf_Versym) -> *mut GElf_Versym;
    pub fn gelf_update_versym(__data: *mut Elf_Data,
                              __ndx: ::std::os::raw::c_int,
                              __src: *mut GElf_Versym)
     -> ::std::os::raw::c_int;
    pub fn gelf_getverneed(__data: *mut Elf_Data,
                           __offset: ::std::os::raw::c_int,
                           __dst: *mut GElf_Verneed) -> *mut GElf_Verneed;
    pub fn gelf_update_verneed(__data: *mut Elf_Data,
                               __offset: ::std::os::raw::c_int,
                               __src: *mut GElf_Verneed)
     -> ::std::os::raw::c_int;
    pub fn gelf_getvernaux(__data: *mut Elf_Data,
                           __offset: ::std::os::raw::c_int,
                           __dst: *mut GElf_Vernaux) -> *mut GElf_Vernaux;
    pub fn gelf_update_vernaux(__data: *mut Elf_Data,
                               __offset: ::std::os::raw::c_int,
                               __src: *mut GElf_Vernaux)
     -> ::std::os::raw::c_int;
    pub fn gelf_getverdef(__data: *mut Elf_Data,
                          __offset: ::std::os::raw::c_int,
                          __dst: *mut GElf_Verdef) -> *mut GElf_Verdef;
    pub fn gelf_update_verdef(__data: *mut Elf_Data,
                              __offset: ::std::os::raw::c_int,
                              __src: *mut GElf_Verdef)
     -> ::std::os::raw::c_int;
    pub fn gelf_getverdaux(__data: *mut Elf_Data,
                           __offset: ::std::os::raw::c_int,
                           __dst: *mut GElf_Verdaux) -> *mut GElf_Verdaux;
    pub fn gelf_update_verdaux(__data: *mut Elf_Data,
                               __offset: ::std::os::raw::c_int,
                               __src: *mut GElf_Verdaux)
     -> ::std::os::raw::c_int;
    pub fn gelf_getauxv(__data: *mut Elf_Data, __ndx: ::std::os::raw::c_int,
                        __dst: *mut GElf_auxv_t) -> *mut GElf_auxv_t;
    pub fn gelf_update_auxv(__data: *mut Elf_Data,
                            __ndx: ::std::os::raw::c_int,
                            __src: *mut GElf_auxv_t) -> ::std::os::raw::c_int;
    pub fn gelf_getnote(__data: *mut Elf_Data, __offset: size_t,
                        __result: *mut GElf_Nhdr, __name_offset: *mut size_t,
                        __desc_offset: *mut size_t) -> size_t;
    pub fn gelf_checksum(__elf: *mut Elf) -> ::std::os::raw::c_long;
    pub fn dwarf_begin(fildes: ::std::os::raw::c_int, cmd: Dwarf_Cmd)
     -> *mut Dwarf;
    pub fn dwarf_begin_elf(elf: *mut Elf, cmd: Dwarf_Cmd,
                           scngrp: *mut Elf_Scn) -> *mut Dwarf;
    pub fn dwarf_getelf(dwarf: *mut Dwarf) -> *mut Elf;
    pub fn dwarf_cu_getdwarf(cu: *mut Dwarf_CU) -> *mut Dwarf;
    pub fn dwarf_getalt(main: *mut Dwarf) -> *mut Dwarf;
    pub fn dwarf_setalt(main: *mut Dwarf, alt: *mut Dwarf);
    pub fn dwarf_end(dwarf: *mut Dwarf) -> ::std::os::raw::c_int;
    pub fn dwarf_getscn_info(dwarf: *mut Dwarf) -> *mut Elf_Data;
    pub fn dwarf_nextcu(dwarf: *mut Dwarf, off: Dwarf_Off,
                        next_off: *mut Dwarf_Off, header_sizep: *mut size_t,
                        abbrev_offsetp: *mut Dwarf_Off,
                        address_sizep: *mut uint8_t,
                        offset_sizep: *mut uint8_t) -> ::std::os::raw::c_int;
    pub fn dwarf_next_unit(dwarf: *mut Dwarf, off: Dwarf_Off,
                           next_off: *mut Dwarf_Off,
                           header_sizep: *mut size_t,
                           versionp: *mut Dwarf_Half,
                           abbrev_offsetp: *mut Dwarf_Off,
                           address_sizep: *mut uint8_t,
                           offset_sizep: *mut uint8_t,
                           type_signaturep: *mut uint64_t,
                           type_offsetp: *mut Dwarf_Off)
     -> ::std::os::raw::c_int;
    pub fn dwarf_next_cfi(e_ident: *mut ::std::os::raw::c_uchar,
                          data: *mut Elf_Data, eh_frame_p: u8,
                          offset: Dwarf_Off, next_offset: *mut Dwarf_Off,
                          entry: *mut Dwarf_CFI_Entry)
     -> ::std::os::raw::c_int;
    pub fn dwarf_getcfi(dwarf: *mut Dwarf) -> *mut Dwarf_CFI;
    pub fn dwarf_getcfi_elf(elf: *mut Elf) -> *mut Dwarf_CFI;
    pub fn dwarf_cfi_end(cache: *mut Dwarf_CFI) -> ::std::os::raw::c_int;
    pub fn dwarf_offdie(dbg: *mut Dwarf, offset: Dwarf_Off,
                        result: *mut Dwarf_Die) -> *mut Dwarf_Die;
    pub fn dwarf_offdie_types(dbg: *mut Dwarf, offset: Dwarf_Off,
                              result: *mut Dwarf_Die) -> *mut Dwarf_Die;
    pub fn dwarf_dieoffset(die: *mut Dwarf_Die) -> Dwarf_Off;
    pub fn dwarf_cuoffset(die: *mut Dwarf_Die) -> Dwarf_Off;
    pub fn dwarf_diecu(die: *mut Dwarf_Die, result: *mut Dwarf_Die,
                       address_sizep: *mut uint8_t,
                       offset_sizep: *mut uint8_t) -> *mut Dwarf_Die;
    pub fn dwarf_cu_die(cu: *mut Dwarf_CU, result: *mut Dwarf_Die,
                        versionp: *mut Dwarf_Half,
                        abbrev_offsetp: *mut Dwarf_Off,
                        address_sizep: *mut uint8_t,
                        offset_sizep: *mut uint8_t,
                        type_signaturep: *mut uint64_t,
                        type_offsetp: *mut Dwarf_Off) -> *mut Dwarf_Die;
    pub fn dwarf_addrdie(dbg: *mut Dwarf, addr: Dwarf_Addr,
                         result: *mut Dwarf_Die) -> *mut Dwarf_Die;
    pub fn dwarf_child(die: *mut Dwarf_Die, result: *mut Dwarf_Die)
     -> ::std::os::raw::c_int;
    pub fn dwarf_siblingof(die: *mut Dwarf_Die, result: *mut Dwarf_Die)
     -> ::std::os::raw::c_int;
    pub fn dwarf_peel_type(die: *mut Dwarf_Die, result: *mut Dwarf_Die)
     -> ::std::os::raw::c_int;
    pub fn dwarf_haschildren(die: *mut Dwarf_Die) -> ::std::os::raw::c_int;
    pub fn dwarf_getattrs(die: *mut Dwarf_Die,
                          callback:
                              ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                             *mut Dwarf_Attribute,
                                                                         arg2:
                                                                             *mut ::std::os::raw::c_void)
                                                        ->
                                                            ::std::os::raw::c_int>,
                          arg: *mut ::std::os::raw::c_void, offset: ptrdiff_t)
     -> ptrdiff_t;
    pub fn dwarf_tag(die: *mut Dwarf_Die) -> ::std::os::raw::c_int;
    pub fn dwarf_attr(die: *mut Dwarf_Die,
                      search_name: ::std::os::raw::c_uint,
                      result: *mut Dwarf_Attribute) -> *mut Dwarf_Attribute;
    pub fn dwarf_hasattr(die: *mut Dwarf_Die,
                         search_name: ::std::os::raw::c_uint)
     -> ::std::os::raw::c_int;
    pub fn dwarf_attr_integrate(die: *mut Dwarf_Die,
                                search_name: ::std::os::raw::c_uint,
                                result: *mut Dwarf_Attribute)
     -> *mut Dwarf_Attribute;
    pub fn dwarf_hasattr_integrate(die: *mut Dwarf_Die,
                                   search_name: ::std::os::raw::c_uint)
     -> ::std::os::raw::c_int;
    pub fn dwarf_hasform(attr: *mut Dwarf_Attribute,
                         search_form: ::std::os::raw::c_uint)
     -> ::std::os::raw::c_int;
    pub fn dwarf_whatattr(attr: *mut Dwarf_Attribute)
     -> ::std::os::raw::c_uint;
    pub fn dwarf_whatform(attr: *mut Dwarf_Attribute)
     -> ::std::os::raw::c_uint;
    pub fn dwarf_formstring(attrp: *mut Dwarf_Attribute)
     -> *const ::std::os::raw::c_char;
    pub fn dwarf_formudata(attr: *mut Dwarf_Attribute,
                           return_uval: *mut Dwarf_Word)
     -> ::std::os::raw::c_int;
    pub fn dwarf_formsdata(attr: *mut Dwarf_Attribute,
                           return_uval: *mut Dwarf_Sword)
     -> ::std::os::raw::c_int;
    pub fn dwarf_formaddr(attr: *mut Dwarf_Attribute,
                          return_addr: *mut Dwarf_Addr)
     -> ::std::os::raw::c_int;
    pub fn dwarf_formref(attr: *mut Dwarf_Attribute,
                         return_offset: *mut Dwarf_Off)
     -> ::std::os::raw::c_int;
    pub fn dwarf_formref_die(attr: *mut Dwarf_Attribute,
                             die_mem: *mut Dwarf_Die) -> *mut Dwarf_Die;
    pub fn dwarf_formblock(attr: *mut Dwarf_Attribute,
                           return_block: *mut Dwarf_Block)
     -> ::std::os::raw::c_int;
    pub fn dwarf_formflag(attr: *mut Dwarf_Attribute, return_bool: *mut u8)
     -> ::std::os::raw::c_int;
    pub fn dwarf_diename(die: *mut Dwarf_Die)
     -> *const ::std::os::raw::c_char;
    pub fn dwarf_highpc(die: *mut Dwarf_Die, return_addr: *mut Dwarf_Addr)
     -> ::std::os::raw::c_int;
    pub fn dwarf_lowpc(die: *mut Dwarf_Die, return_addr: *mut Dwarf_Addr)
     -> ::std::os::raw::c_int;
    pub fn dwarf_entrypc(die: *mut Dwarf_Die, return_addr: *mut Dwarf_Addr)
     -> ::std::os::raw::c_int;
    pub fn dwarf_haspc(die: *mut Dwarf_Die, pc: Dwarf_Addr)
     -> ::std::os::raw::c_int;
    pub fn dwarf_ranges(die: *mut Dwarf_Die, offset: ptrdiff_t,
                        basep: *mut Dwarf_Addr, startp: *mut Dwarf_Addr,
                        endp: *mut Dwarf_Addr) -> ptrdiff_t;
    pub fn dwarf_bytesize(die: *mut Dwarf_Die) -> ::std::os::raw::c_int;
    pub fn dwarf_bitsize(die: *mut Dwarf_Die) -> ::std::os::raw::c_int;
    pub fn dwarf_bitoffset(die: *mut Dwarf_Die) -> ::std::os::raw::c_int;
    pub fn dwarf_arrayorder(die: *mut Dwarf_Die) -> ::std::os::raw::c_int;
    pub fn dwarf_srclang(die: *mut Dwarf_Die) -> ::std::os::raw::c_int;
    pub fn dwarf_getabbrev(die: *mut Dwarf_Die, offset: Dwarf_Off,
                           lengthp: *mut size_t) -> *mut Dwarf_Abbrev;
    pub fn dwarf_offabbrev(dbg: *mut Dwarf, offset: Dwarf_Off,
                           lengthp: *mut size_t, abbrevp: *mut Dwarf_Abbrev)
     -> ::std::os::raw::c_int;
    pub fn dwarf_getabbrevcode(abbrev: *mut Dwarf_Abbrev)
     -> ::std::os::raw::c_uint;
    pub fn dwarf_getabbrevtag(abbrev: *mut Dwarf_Abbrev)
     -> ::std::os::raw::c_uint;
    pub fn dwarf_abbrevhaschildren(abbrev: *mut Dwarf_Abbrev)
     -> ::std::os::raw::c_int;
    pub fn dwarf_getattrcnt(abbrev: *mut Dwarf_Abbrev, attrcntp: *mut size_t)
     -> ::std::os::raw::c_int;
    pub fn dwarf_getabbrevattr(abbrev: *mut Dwarf_Abbrev, idx: size_t,
                               namep: *mut ::std::os::raw::c_uint,
                               formp: *mut ::std::os::raw::c_uint,
                               offset: *mut Dwarf_Off)
     -> ::std::os::raw::c_int;
    pub fn dwarf_getstring(dbg: *mut Dwarf, offset: Dwarf_Off,
                           lenp: *mut size_t)
     -> *const ::std::os::raw::c_char;
    pub fn dwarf_getpubnames(dbg: *mut Dwarf,
                             callback:
                                 ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                *mut Dwarf,
                                                                            arg2:
                                                                                *mut Dwarf_Global,
                                                                            arg3:
                                                                                *mut ::std::os::raw::c_void)
                                                           ->
                                                               ::std::os::raw::c_int>,
                             arg: *mut ::std::os::raw::c_void,
                             offset: ptrdiff_t) -> ptrdiff_t;
    pub fn dwarf_getsrclines(cudie: *mut Dwarf_Die,
                             lines: *mut *mut Dwarf_Lines,
                             nlines: *mut size_t) -> ::std::os::raw::c_int;
    pub fn dwarf_onesrcline(lines: *mut Dwarf_Lines, idx: size_t)
     -> *mut Dwarf_Line;
    pub fn dwarf_getsrcfiles(cudie: *mut Dwarf_Die,
                             files: *mut *mut Dwarf_Files,
                             nfiles: *mut size_t) -> ::std::os::raw::c_int;
    pub fn dwarf_getsrc_die(cudie: *mut Dwarf_Die, addr: Dwarf_Addr)
     -> *mut Dwarf_Line;
    pub fn dwarf_getsrc_file(dbg: *mut Dwarf,
                             fname: *const ::std::os::raw::c_char,
                             line: ::std::os::raw::c_int,
                             col: ::std::os::raw::c_int,
                             srcsp: *mut *mut *mut Dwarf_Line,
                             nsrcs: *mut size_t) -> ::std::os::raw::c_int;
    pub fn dwarf_lineaddr(line: *mut Dwarf_Line, addrp: *mut Dwarf_Addr)
     -> ::std::os::raw::c_int;
    pub fn dwarf_lineop_index(line: *mut Dwarf_Line,
                              op_indexp: *mut ::std::os::raw::c_uint)
     -> ::std::os::raw::c_int;
    pub fn dwarf_lineno(line: *mut Dwarf_Line,
                        linep: *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn dwarf_linecol(line: *mut Dwarf_Line,
                         colp: *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn dwarf_linebeginstatement(line: *mut Dwarf_Line, flagp: *mut u8)
     -> ::std::os::raw::c_int;
    pub fn dwarf_lineendsequence(line: *mut Dwarf_Line, flagp: *mut u8)
     -> ::std::os::raw::c_int;
    pub fn dwarf_lineblock(line: *mut Dwarf_Line, flagp: *mut u8)
     -> ::std::os::raw::c_int;
    pub fn dwarf_lineprologueend(line: *mut Dwarf_Line, flagp: *mut u8)
     -> ::std::os::raw::c_int;
    pub fn dwarf_lineepiloguebegin(line: *mut Dwarf_Line, flagp: *mut u8)
     -> ::std::os::raw::c_int;
    pub fn dwarf_lineisa(line: *mut Dwarf_Line,
                         isap: *mut ::std::os::raw::c_uint)
     -> ::std::os::raw::c_int;
    pub fn dwarf_linediscriminator(line: *mut Dwarf_Line,
                                   discp: *mut ::std::os::raw::c_uint)
     -> ::std::os::raw::c_int;
    pub fn dwarf_linesrc(line: *mut Dwarf_Line, mtime: *mut Dwarf_Word,
                         length: *mut Dwarf_Word)
     -> *const ::std::os::raw::c_char;
    pub fn dwarf_filesrc(file: *mut Dwarf_Files, idx: size_t,
                         mtime: *mut Dwarf_Word, length: *mut Dwarf_Word)
     -> *const ::std::os::raw::c_char;
    pub fn dwarf_getsrcdirs(files: *mut Dwarf_Files,
                            result: *mut *const *const ::std::os::raw::c_char,
                            ndirs: *mut size_t) -> ::std::os::raw::c_int;
    pub fn dwarf_getlocation(attr: *mut Dwarf_Attribute,
                             expr: *mut *mut Dwarf_Op, exprlen: *mut size_t)
     -> ::std::os::raw::c_int;
    pub fn dwarf_getlocation_addr(attr: *mut Dwarf_Attribute,
                                  address: Dwarf_Addr,
                                  exprs: *mut *mut Dwarf_Op,
                                  exprlens: *mut size_t, nlocs: size_t)
     -> ::std::os::raw::c_int;
    pub fn dwarf_getlocations(attr: *mut Dwarf_Attribute, offset: ptrdiff_t,
                              basep: *mut Dwarf_Addr, startp: *mut Dwarf_Addr,
                              endp: *mut Dwarf_Addr, expr: *mut *mut Dwarf_Op,
                              exprlen: *mut size_t) -> ptrdiff_t;
    pub fn dwarf_getlocation_implicit_value(attr: *mut Dwarf_Attribute,
                                            op: *const Dwarf_Op,
                                            return_block: *mut Dwarf_Block)
     -> ::std::os::raw::c_int;
    pub fn dwarf_getlocation_implicit_pointer(attr: *mut Dwarf_Attribute,
                                              op: *const Dwarf_Op,
                                              result: *mut Dwarf_Attribute)
     -> ::std::os::raw::c_int;
    pub fn dwarf_getlocation_die(attr: *mut Dwarf_Attribute,
                                 op: *const Dwarf_Op, result: *mut Dwarf_Die)
     -> ::std::os::raw::c_int;
    pub fn dwarf_getlocation_attr(attr: *mut Dwarf_Attribute,
                                  op: *const Dwarf_Op,
                                  result: *mut Dwarf_Attribute)
     -> ::std::os::raw::c_int;
    pub fn dwarf_aggregate_size(die: *mut Dwarf_Die, size: *mut Dwarf_Word)
     -> ::std::os::raw::c_int;
    pub fn dwarf_getscopes(cudie: *mut Dwarf_Die, pc: Dwarf_Addr,
                           scopes: *mut *mut Dwarf_Die)
     -> ::std::os::raw::c_int;
    pub fn dwarf_getscopes_die(die: *mut Dwarf_Die,
                               scopes: *mut *mut Dwarf_Die)
     -> ::std::os::raw::c_int;
    pub fn dwarf_getscopevar(scopes: *mut Dwarf_Die,
                             nscopes: ::std::os::raw::c_int,
                             name: *const ::std::os::raw::c_char,
                             skip_shadows: ::std::os::raw::c_int,
                             match_file: *const ::std::os::raw::c_char,
                             match_lineno: ::std::os::raw::c_int,
                             match_linecol: ::std::os::raw::c_int,
                             result: *mut Dwarf_Die) -> ::std::os::raw::c_int;
    pub fn dwarf_getaranges(dbg: *mut Dwarf, aranges: *mut *mut Dwarf_Aranges,
                            naranges: *mut size_t) -> ::std::os::raw::c_int;
    pub fn dwarf_onearange(aranges: *mut Dwarf_Aranges, idx: size_t)
     -> *mut Dwarf_Arange;
    pub fn dwarf_getarangeinfo(arange: *mut Dwarf_Arange,
                               addrp: *mut Dwarf_Addr,
                               lengthp: *mut Dwarf_Word,
                               offsetp: *mut Dwarf_Off)
     -> ::std::os::raw::c_int;
    pub fn dwarf_getarange_addr(aranges: *mut Dwarf_Aranges, addr: Dwarf_Addr)
     -> *mut Dwarf_Arange;
    pub fn dwarf_getfuncs(cudie: *mut Dwarf_Die,
                          callback:
                              ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                             *mut Dwarf_Die,
                                                                         arg2:
                                                                             *mut ::std::os::raw::c_void)
                                                        ->
                                                            ::std::os::raw::c_int>,
                          arg: *mut ::std::os::raw::c_void, offset: ptrdiff_t)
     -> ptrdiff_t;
    pub fn dwarf_decl_file(decl: *mut Dwarf_Die)
     -> *const ::std::os::raw::c_char;
    pub fn dwarf_decl_line(decl: *mut Dwarf_Die,
                           linep: *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn dwarf_decl_column(decl: *mut Dwarf_Die,
                             colp: *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn dwarf_func_inline(func: *mut Dwarf_Die) -> ::std::os::raw::c_int;
    pub fn dwarf_func_inline_instances(func: *mut Dwarf_Die,
                                       callback:
                                           ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                          *mut Dwarf_Die,
                                                                                      arg2:
                                                                                          *mut ::std::os::raw::c_void)
                                                                     ->
                                                                         ::std::os::raw::c_int>,
                                       arg: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
    pub fn dwarf_entry_breakpoints(die: *mut Dwarf_Die,
                                   bkpts: *mut *mut Dwarf_Addr)
     -> ::std::os::raw::c_int;
    pub fn dwarf_getmacros(cudie: *mut Dwarf_Die,
                           callback:
                               ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                              *mut Dwarf_Macro,
                                                                          arg2:
                                                                              *mut ::std::os::raw::c_void)
                                                         ->
                                                             ::std::os::raw::c_int>,
                           arg: *mut ::std::os::raw::c_void, token: ptrdiff_t)
     -> ptrdiff_t;
    pub fn dwarf_getmacros_off(dbg: *mut Dwarf, macoff: Dwarf_Off,
                               callback:
                                   ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                  *mut Dwarf_Macro,
                                                                              arg2:
                                                                                  *mut ::std::os::raw::c_void)
                                                             ->
                                                                 ::std::os::raw::c_int>,
                               arg: *mut ::std::os::raw::c_void,
                               token: ptrdiff_t) -> ptrdiff_t;
    pub fn dwarf_macro_getsrcfiles(dbg: *mut Dwarf, macro_: *mut Dwarf_Macro,
                                   files: *mut *mut Dwarf_Files,
                                   nfiles: *mut size_t)
     -> ::std::os::raw::c_int;
    pub fn dwarf_macro_opcode(macro_: *mut Dwarf_Macro,
                              opcodep: *mut ::std::os::raw::c_uint)
     -> ::std::os::raw::c_int;
    pub fn dwarf_macro_getparamcnt(macro_: *mut Dwarf_Macro,
                                   paramcntp: *mut size_t)
     -> ::std::os::raw::c_int;
    pub fn dwarf_macro_param(macro_: *mut Dwarf_Macro, idx: size_t,
                             attribute: *mut Dwarf_Attribute)
     -> ::std::os::raw::c_int;
    pub fn dwarf_macro_param1(macro_: *mut Dwarf_Macro,
                              paramp: *mut Dwarf_Word)
     -> ::std::os::raw::c_int;
    pub fn dwarf_macro_param2(macro_: *mut Dwarf_Macro,
                              paramp: *mut Dwarf_Word,
                              strp: *mut *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn dwarf_cfi_addrframe(cache: *mut Dwarf_CFI, address: Dwarf_Addr,
                               frame: *mut *mut Dwarf_Frame)
     -> ::std::os::raw::c_int;
    pub fn dwarf_frame_info(frame: *mut Dwarf_Frame, start: *mut Dwarf_Addr,
                            end: *mut Dwarf_Addr, signalp: *mut u8)
     -> ::std::os::raw::c_int;
    pub fn dwarf_frame_cfa(frame: *mut Dwarf_Frame, ops: *mut *mut Dwarf_Op,
                           nops: *mut size_t) -> ::std::os::raw::c_int;
    pub fn dwarf_frame_register(frame: *mut Dwarf_Frame,
                                regno: ::std::os::raw::c_int,
                                ops_mem: *mut Dwarf_Op,
                                ops: *mut *mut Dwarf_Op, nops: *mut size_t)
     -> ::std::os::raw::c_int;
    pub fn dwarf_errno() -> ::std::os::raw::c_int;
    pub fn dwarf_errmsg(err: ::std::os::raw::c_int)
     -> *const ::std::os::raw::c_char;
    pub fn dwarf_new_oom_handler(dbg: *mut Dwarf, handler: Dwarf_OOM)
     -> Dwarf_OOM;
}
